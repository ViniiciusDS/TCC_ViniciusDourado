###################           ARQUIVO MAIN ##############################
%clc 
clear all
tic_total = tic;

% Dados Cidades N = 15
% 1 - UEL,Londrina                          | 26 - Foz do Iguacu, PR       
% 2 - Ibipora, PR                           | 27 - Borrazopolis, PR
% 3 - Maringa, PR                           | 28 - Guapirama, PR
% 4 - Cascavel, PR                          | 29 - Inaja, PR
% 5 - Paranagua, PR                         | 30 - Nova Fatima, PR
% 6 - Perola, PR                            | 31 - Lobato, PR
% 7 - Palmas, PR                            | 32 - Araruna, PR
% 8 - Brasilandia do Sul, PR                | 33 - Jesuitas, PR
% 9 - Senges, PR                            | 34 - Santa Izabel do Oeste, PR
% 10 - Santo Antonio do Sudoeste, PR        | 35 - Centenario do Sul, PR
% 11 - Curitiba, PR                         | 36 - Sao Joao, PR
% 12 - Nova Londrina, PR                    | 37 - Florestopolis, PR
% 13 - Umuarama, PR                         | 38 - Contenda, PR
% 14 - Arapongas, PR                        | 39 - Guaratuba, PR
% 15 - Alvorada do Sul, PR                  | 40 - Luiziana, PR
% 16 - Roncador, PR                         | 41 - Cafeara, PR
% 17 - Fenix, PR                            | 42 - Castro, PR
% 18 - Maua da Serra, PR                    | 43 - Lapa, PR
% 19 - Cruzeiro do Oeste, PR                | 44 - Toledo, PR
% 20 - Urai, PR                             | 45 - Piraquara, PR
% 21 - Cornelio Procopio, PR                | 46 - Jacarezinho, PR
% 22 - Sapopema, PR                         | 47 - Matinhos, PR
% 23 - General Carneiro, PR                 | 48 - Assai, PR
% 24 - Sao Jose dos Pinhais, PR             | 49 - Paranacity, PR
% 25 - Indianopolis, PR                     | 50 - Primeiro de Maio, PR

%   Matrizes de dados
%DistMatriz = readmatrix('MatrizTempProfessor.txt');
DistMatriz = readmatrix('MatriDistJanta.txt');
%DistMatriz = readmatrix('MatrizDistProfessor.txt');
TempMatriz = readmatrix('MatrizTempProfessor.txt');

%   Nmr de simulações e cidades aleatórias
n_simulacoes  = 8;
N_cidades     = 4;     %%%%%%    12 é o limite para força bruta %%%%%%%%

%   Intervalo de cidades
num_cidades_vec = 4:11;
num_simulacoes = numel(num_cidades_vec);

% Defina variáveis de controle para cada método
executar_forca_bruta = 1; % 1 para executar, 0 para não executar
executar_alg_genetico = 1; % 1 para executar, 0 para não executar
executar_simulated_annealing = 1; % 1 para executar, 0 para não executar

%   Tamanho População inicial e Numero de gerações para o Algoritmo Genético
tam_Pop_ini_AG = 10;
tam_gera_AG    = 100;

%   Variaveis para o modelo de Simulated Annealing
num_int_SA  = 100;
temp_ini    = 0.7;
taxa_resfri = 0.95;

%   Criação da Tabela de Resultados
Tab_Resultados_tempo   = zeros(n_simulacoes,3);
Resultados_Final_tempo = zeros(1,3);
Tab_Resultados_dist    = zeros(n_simulacoes,3);


%   Nmr de cidades
num_cidades = size(DistMatriz, 1);

for sim = 1:n_simulacoes
   N_cidades = num_cidades_vec(sim); % Altera o número de cidades
    
    % Sortear cidades
    indi_random = randperm(num_cidades, N_cidades);
    
    % Selecionar as cidades na matriz original
    MatrizDistTrab = DistMatriz(indi_random, indi_random);
    MatrizTempTrab = TempMatriz(indi_random, indi_random);

    % Executar Força Bruta se a variável de controle estiver definida como 1
    if executar_forca_bruta == 1
        resultados_forca_bruta = forcabruta(MatrizDistTrab);
        tempoFB = resultados_forca_bruta.tempoFB;
        menordistFB = resultados_forca_bruta.distanciamenor;
        Tab_Resultados_tempo(sim, 1) = tempoFB;
        Tab_Resultados_dist(sim, 1)  = menordistFB;
    end
    
    % Executar Algoritmo Genético se a variável de controle estiver definida como 1
    if executar_alg_genetico == 1
        resultados_algoritmo_getenico = alggenetico(MatrizDistTrab, tam_Pop_ini_AG, tam_gera_AG);
        %resultados_algoritmo_getenico = alggenetico_v2(MatrizDistTrab, tam_Pop_ini_AG, tam_gera_AG,MatrizTempTrab);
        tempoAG = resultados_algoritmo_getenico.tempoAG;
        menordistAG = resultados_algoritmo_getenico.menorDistancia;
        Tab_Resultados_tempo(sim, 2) = tempoAG;
        Tab_Resultados_dist(sim, 2)  = menordistAG;
    end
    
    % Executar Simulated Annealing se a variável de controle estiver definida como 1
    if executar_simulated_annealing == 1
        resultados_SA = simulatedAnnealing(MatrizDistTrab, temp_ini, taxa_resfri, num_int_SA);
        tempoSA = resultados_SA.tempoSA;
        menordistSA = resultados_SA.menorDistancia;
        Tab_Resultados_tempo(sim, 3) = tempoSA;
        Tab_Resultados_dist(sim, 3)  = menordistSA;
    end
end

% Calcula a média dos tempos das simulações
Resultados_Final_tempo(1,1) = mean(Tab_Resultados_tempo(:, 1));
Resultados_Final_tempo(1,2) = mean(Tab_Resultados_tempo(:, 2));
Resultados_Final_tempo(1,3) = mean(Tab_Resultados_tempo(:, 3));

% Calcula o desvio padrão dos tempos das simulações
desvio_padrao_temposFB = std(Tab_Resultados_tempo(:, 1));
desvio_padrao_temposAG = std(Tab_Resultados_tempo(:, 2));
desvio_padrao_temposSA = std(Tab_Resultados_tempo(:, 3));


% Crie um gráfico de linha para cada método
plot(num_cidades_vec, Tab_Resultados_tempo(:, 1), '-o', 'DisplayName', 'Força Bruta','LineWidth',5);
hold on;
plot(num_cidades_vec, Tab_Resultados_tempo(:, 2), '-o', 'DisplayName', 'Algoritmo Genético','LineWidth',5);
plot(num_cidades_vec, Tab_Resultados_tempo(:, 3), '-o', 'DisplayName', 'Simulated Annealing','LineWidth',5);

xlabel('Número de Cidades','FontSize', 20);
ylabel('Tempo de Execução (segundos)','FontSize', 20);
title('Tempo de Execução x Número de Cidades','FontSize', 20);
legend('Location', 'Northwest','FontSize',20);
% Configurar o tamanho da fonte dos números nos eixos x e y
ax = gca; % Obtenha o objeto dos eixos atuais
ax.FontSize = 20; % Altere o tamanho da fonte dos números dos eixos x e y aqui

grid on;
grid on;
hold off; 

% Crie um gráfico de linha para Algoritmo Genético e Simulated Annealing
figure;
plot(num_cidades_vec, Tab_Resultados_tempo(:, 2), '-o', 'DisplayName', 'Algoritmo Genético','LineWidth',5);
hold on;
plot(num_cidades_vec, Tab_Resultados_tempo(:, 3), '-o', 'DisplayName', 'Simulated Annealing','LineWidth',5);

xlabel('Número de Cidades','FontSize', 20);
ylabel('Tempo de Execução (segundos)','FontSize', 20);
title('Tempo de Execução de Algoritmo Genético e Simulated Annealing x Número de Cidades','FontSize', 20);
legend('Location', 'Northwest','FontSize',20);
grid on;
hold off;
% Configurar o tamanho da fonte dos números nos eixos x e y
ax = gca; % Obtenha o objeto dos eixos atuais
ax.FontSize = 20; % Altere o tamanho da fonte dos números dos eixos x e y aqui
grid on;

% Crie um gráfico de barras das distâncias em função do número de cidades
figure;
bar(num_cidades_vec, Tab_Resultados_dist, 'grouped');
xlabel('Número de Cidades', 'FontSize', 20);
ylabel('Tempo', 'FontSize', 20);
title('Tempo x Número de Cidades', 'FontSize', 20);
legend({'Força Bruta', 'Algoritmo Genético', 'Simulated Annealing'}, 'FontSize', 16);
% Configurar o tamanho da fonte dos números nos eixos x e y
ax = gca; % Obtenha o objeto dos eixos atuais
ax.FontSize = 20; % Altere o tamanho da fonte dos números dos eixos x e y aqui
grid on;

%   Exibe o Resultado final
%   Força bruta
disp(['Média dos tempos das simulações do Método Força Bruta: ', num2str(Resultados_Final_tempo(1,1)), ' segundos']);
disp(['Desvio padrão dos tempos das simulações: ', num2str(desvio_padrao_temposFB), ' segundos']);
%   Algoritmo Genético
disp(['Média dos tempos das simulações do Método Algoritmo Genético: ', num2str(Resultados_Final_tempo(1,2)), ' segundos']);
disp(['Desvio padrão dos tempos das simulações: ', num2str(desvio_padrao_temposAG), ' segundos']);
%   Simulated Annealing
disp(['Média dos tempos das simulações do Método Simulated Annealing: ', num2str(Resultados_Final_tempo(1,3)), ' segundos']);
disp(['Desvio padrão dos tempos das simulações: ', num2str(desvio_padrao_temposSA), ' segundos']);


% Exibe o tempo total de execução do programa
tic_total = toc(tic_total);
disp(['Tempo total de execução do programa: ', num2str(tic_total), ' segundos']);


ttest_fb = ttest(Tab_Resultados_tempo(:,1),Resultados_Final_tempo(1,1))
ttest_ag = ttest(Tab_Resultados_tempo(:,2),Resultados_Final_tempo(1,2))
ttest_sa = ttest(Tab_Resultados_tempo(:,3),Resultados_Final_tempo(1,3))

% Realize um teste t de Student pareado (duas amostras relacionadas)
[h, p_value] = ttest(Tab_Resultados_tempo(:,3), Tab_Resultados_tempo(:,2));

% Exiba o resultado do teste t
disp(['Valor-p do teste t de Student: ', num2str(p_value)]);

% Verifique se o valor-p é menor que o nível de significância desejado (0,2)
nivel_significancia = 0.2;
if p_value < nivel_significancia
    disp('Rejeita a hipótese nula: Existe uma diferença significativa entre os métodos.');
else
    disp('Não rejeita a hipótese nula: Não há evidência suficiente para concluir que existe uma diferença significativa entre os métodos.');
end

##################################################################################################
########################	SA	######################################
function SA_Func = simulatedAnnealing(matrizDistancia, temperaturaInicial, taxaResfriamento, numIteracoes)

    tic_total = tic;
    
    %   Definindo variaveis
    numCidades         = size(matrizDistancia, 1);

    %   Gera a solução inicial aleatória
    cidades_aleatorias = randperm(numCidades-1) + 1;
    melhorRota         = [1, cidades_aleatorias, 1]; %  Solução inicial Aleatória
    melhorCusto        = calcularCustoRota(melhorRota, matrizDistancia);
    
    %   Variaveis para parâmetro de comparação
    rotaAtual = melhorRota;
    custoAtual = melhorCusto;

    for iteracao = 1:numIteracoes

        % Gera uma nova solução vizinha alterando aleatoriamente a solução atual
        novaRota = gerarNovaRotaVizinha(rotaAtual);
        novoCusto = calcularCustoRota(novaRota, matrizDistancia);

        % Calcula a diferença de custo entre a nova solução e a solução atual
        deltaCusto = novoCusto - custoAtual;

        % Aceita a nova solução se ela for melhor ou com uma certa probabilidade se for pior
        if (deltaCusto < 0) || (rand() < exp(-deltaCusto / temperaturaInicial))
            rotaAtual = novaRota;
            custoAtual = novoCusto;

            % Atualiza a melhor solução encontrada
            if custoAtual < melhorCusto
                melhorRota = rotaAtual;
                melhorCusto = custoAtual;
            end
        end

        % Atualiza a temperatura
        temperaturaInicial = temperaturaInicial * taxaResfriamento;
    end

    tempoSA = toc(tic_total);

    % Preparando a saída da função
    SA_Func.tempoSA = tempoSA;
    SA_Func.menorDistancia = melhorCusto;
    SA_Func.melhorRota = melhorRota;

    

end

function custo = calcularCustoRota(rota, matrizDistancia)

    % Calcula o custo total da rota
    custo = 0;
    numCidades = length(rota);

    for i = 1:numCidades

        cidadeAtual = rota(i);
        cidadeProxima = rota(mod(i, numCidades) + 1); % Próxima cidade considerando rota circular
        custo = custo + matrizDistancia(cidadeAtual, cidadeProxima);
        
    end
end

function novaRota = gerarNovaRotaVizinha(rotaAtual)

    % Gera uma nova solução vizinha alterando aleatoriamente a solução atual
    numCidades = length(rotaAtual);
    indice1 = randi(numCidades);
    indice2 = randi(numCidades);
    novaRota = rotaAtual;
    novaRota([indice1, indice2]) = novaRota([indice2, indice1]); % Troca duas cidades aleatoriamente

end


#################################################################################################	
##########################	FB	#########################################


function FB_func = forcabruta(MatrizDistTrab)

tempoFB = tic;
DistMatriz = MatrizDistTrab;

VetorIndi = 1:size(DistMatriz, 1);

% Permutação dos índices das cidades
Pi = perms(VetorIndi(2:end));

% Adicionar a cidade de partida no início de cada permutação
Pi = [ones(size(Pi, 1), 1), Pi, ones(size(Pi, 1), 1)];

% Variavel da Distancia
distanciamenor  = inf;
distanciamaior = 0;

% Calculo da rota
VetorDistancias = zeros(length(Pi),1);
Indice_Rota_menor = 0;
Indice_Rota_maior = 0;

for i = 1:length(Pi)
    rota = Pi(i, :); % Armazena a rota atual
    distancia   = 0;
    
    for j = 1:length(rota)   
        Cidade_partida = rota(j);
        Cidade_chegada = rota(mod(j, length(rota)) + 1);
        distancia = distancia + DistMatriz(Cidade_partida, Cidade_chegada);
    end

    % Armazenador de distancias
    VetorDistancias(i,1) = distancia;

    % Comparadores
    if distancia < distanciamenor
        distanciamenor = distancia;
        Indice_Rota_menor = i;
    end
    if distancia > distanciamaior
        distanciamaior = distancia;
        Indice_Rota_maior = i;
    end

end

% Obtém a rota com menor distância (desconsiderando a cidade de partida duplicada)
Rota_menor = Pi(Indice_Rota_menor, :);

% Obtém a rota com maior distância (desconsiderando a cidade de partida duplicada)
Rota_maior = Pi(Indice_Rota_maior, :);
tempoFB = toc(tempoFB);
% Preparando a saída da função
FB_func.distanciamenor = distanciamenor;
FB_func.Indice_Rota_menor = Indice_Rota_menor;
FB_func.Rota_menor = Rota_menor;
FB_func.distanciamaior = distanciamaior;
FB_func.Indice_Rota_maior = Indice_Rota_maior;
FB_func.Rota_maior = Rota_maior;
FB_func.tempoFB = tempoFB;
% % Exibi as distâncias
% disp(['A distância total da menor rota é e a rota é a:']);
% distanciamenor
% Indice_Rota_menor
% Rota_menor
% disp(['A distância total da maior rota ée a rota é a:']);
% distanciamaior
% Indice_Rota_maior
% Rota_maior



end






##########################################################################################	
######################		AG		##########################################


function AG_Func = alggenetico(MatrizDistTrab,tam_Pop_ini,tam_gera)

tempoAG = tic;
DistMatriz = MatrizDistTrab;

numCidades = length(DistMatriz);

%   Alocação de variaveis para aumentar a velocidade
Populacao = zeros(tam_Pop_ini, (numCidades+1));
FilhosPai = zeros(4, (numCidades+1));
FilhosMae = zeros(4, (numCidades+1));
nmr_filhos = zeros((tam_Pop_ini-2),(numCidades+1));

% Gere a população inicial contendo todas as cidades, mas em ordem aleatória
Percurso = zeros(tam_Pop_ini, numCidades+1); % +1 para incluir a cidade de origem no fim da rota

%Geracao da Populacao Inicial
for k = 1:tam_Pop_ini
    
    % Gera um vetor de cidades (exceto a cidade de origem) em ordem aleatória
    cidades_aleatorias = randperm(numCidades-1) + 1;
    
    % Cria o cromossomo (rota) com a cidade de origem no início e fim
    Populacao(k, :) = [1, cidades_aleatorias, 1];


end


for g = 1:tam_gera
    

    %Calcula o percurso total de cada vetor solucao
    for k = 1:size(Populacao,1)
        Percurso(k, g) = Calc_Dist(DistMatriz, Populacao(k,:));
    end

    %Escolhe os mais aptos 
    clear a b;
    [a, b] = sort(Percurso(:,g));
    
    % Recupera a menor distância encontrada
    menorDistancia = a(1);

    % Recupera a melhor rota encontrada
    melhorRota = Populacao(b(1,1), :);

    Pai = Populacao(b(1,1), :);
    Mae = Populacao(b(2,1), :);

    %   Calcula o Nmr de filhos
    num_filhos = size(nmr_filhos,1);
    
    if rem(num_filhos, 2) == 0
        %   Número de filhos é par, logo ambos possuem a mesma quantidade
        palim = num_filhos/2;
        malim = num_filhos/2;

    else
        %   Número de filhos é impar, logo sortea um genitor para ter mais
        %   filhos
        escolha = randi([1,2]);

        if escolha == 1
            %   Pai com mais filhos
            palim = (num_filhos + 1) / 2;
            malim = (num_filhos - 1) / 2;
        
        else
            %   Mae com mais filhos
            palim = (num_filhos - 1) / 2;
            malim = (num_filhos + 1) / 2;
        end    
    end

    %Cada Genitor vai gerar 2 filhos por permuta
    %Sorteia e permuta as duas posicoes do Pai
    for pa = 1:palim
        clear a b;
        [~, b] = sort(rand(2,numCidades));
        %b = b + 1;

        FilhosPai(pa, :) = Pai;
        FilhosPai(pa, b(1, 1)) = Pai(1, b(1, 2));
        FilhosPai(pa, b(1, 2)) = Pai(1, b(1, 1));
    end

    %Sorteia e permuta as duas posicoes da Mae
    for ma = 1:malim
        clear a b;
        [~, b] = sort(rand(2,numCidades));
        %b = b + 1;

        FilhosMae(ma, :) = Mae;
        FilhosMae(ma, b(1, 1)) = Mae(1, b(1, 2));
        FilhosMae(ma, b(1, 2)) = Mae(1, b(1, 1));
    end


    %Atualiza a Populacao
    Populacao = [Pai; Mae; FilhosPai; FilhosMae];
  
end

tempoAG = toc(tempoAG);
%plot(min(Percurso, [], 1));


% Preparando a saída da função
AG_Func.tempoAG = tempoAG;
AG_Func.menorDistancia = menorDistancia;
AG_Func.melhorRota = melhorRota;







end





















